/*!***************************************************
 * mark.js v7.0.2
 * https://github.com/julmot/mark.js
 * Copyright (c) 2014–2016, Julian Motz
 * Released under the MIT license https://git.io/vwTVl
 *****************************************************/

"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (factory, window, document) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], function (jQuery) {
            return factory(window, document, jQuery);
        });
    } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {
        module.exports = factory(window, document, require("jquery"));
    } else {
        factory(window, document, jQuery);
    }
})(function (window, document, $) {
    var Mark = function () {
        function Mark(ctx) {
            _classCallCheck(this, Mark);

            this.ctx = ctx;
        }

        _createClass(Mark, [{
            key: "log",
            value: function log(msg) {
                var level = arguments.length <= 1 || arguments[1] === undefined ? "debug" : arguments[1];

                var log = this.opt.log;
                if (!this.opt.debug) {
                    return;
                }
                if ((typeof log === "undefined" ? "undefined" : _typeof(log)) === "object" && typeof log[level] === "function") {
                    log[level]("mark.js: " + msg);
                }
            }
        }, {
            key: "escapeStr",
            value: function escapeStr(str) {
                return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            }
        }, {
            key: "createRegExp",
            value: function createRegExp(str) {
                str = this.escapeStr(str);
                if (Object.keys(this.opt.synonyms).length) {
                    str = this.createSynonymsRegExp(str);
                }
                if (this.opt.diacritics) {
                    str = this.createDiacriticsRegExp(str);
                }
                str = this.createMergedBlanksRegExp(str);
                str = this.createAccuracyRegExp(str);
                return str;
            }
        }, {
            key: "createSynonymsRegExp",
            value: function createSynonymsRegExp(str) {
                var syn = this.opt.synonyms;
                for (var index in syn) {
                    if (syn.hasOwnProperty(index)) {
                        var value = syn[index],
                            k1 = this.escapeStr(index),
                            k2 = this.escapeStr(value);
                        str = str.replace(new RegExp("(" + k1 + "|" + k2 + ")", "gmi"), "(" + k1 + "|" + k2 + ")");
                    }
                }
                return str;
            }
        }, {
            key: "createDiacriticsRegExp",
            value: function createDiacriticsRegExp(str) {
                var dct = ["aÀÁÂÃÄÅàáâãäåĀāąĄ", "cÇçćĆčČ", "dđĐďĎ", "eÈÉÊËèéêëěĚĒēęĘ", "iÌÍÎÏìíîïĪī", "lłŁ", "nÑñňŇńŃ", "oÒÓÔÕÕÖØòóôõöøŌō", "rřŘ", "sŠšśŚ", "tťŤ", "uÙÚÛÜùúûüůŮŪū", "yŸÿýÝ", "zŽžżŻźŹ"];
                var handled = [];
                str.split("").forEach(function (ch) {
                    dct.every(function (dct) {
                        if (dct.indexOf(ch) !== -1) {
                            if (handled.indexOf(dct) > -1) {
                                return false;
                            }

                            str = str.replace(new RegExp("[" + dct + "]", "gmi"), "[" + dct + "]");
                            handled.push(dct);
                        }
                        return true;
                    });
                });
                return str;
            }
        }, {
            key: "createMergedBlanksRegExp",
            value: function createMergedBlanksRegExp(str) {
                return str.replace(/[\s]+/gmi, "[\\s]*");
            }
        }, {
            key: "createAccuracyRegExp",
            value: function createAccuracyRegExp(str) {
                var _this = this;

                var acc = this.opt.accuracy,
                    val = typeof acc === "string" ? acc : acc.value,
                    ls = typeof acc === "string" ? [] : acc.limiters,
                    lsJoin = "";
                ls.forEach(function (limiter) {
                    lsJoin += "|" + _this.escapeStr(limiter);
                });
                switch (val) {
                    case "partially":
                        return "()(" + str + ")";
                    case "complementary":
                        return "()([^\\s" + lsJoin + "]*" + str + "[^\\s" + lsJoin + "]*)";
                    case "exactly":
                        return "(^|\\s" + lsJoin + ")(" + str + ")(?=$|\\s" + lsJoin + ")";
                }
            }
        }, {
            key: "getSeparatedKeywords",
            value: function getSeparatedKeywords(sv) {
                var _this2 = this;

                var stack = [];
                sv.forEach(function (kw) {
                    if (!_this2.opt.separateWordSearch) {
                        if (kw.trim()) {
                            stack.push(kw);
                        }
                    } else {
                        kw.split(" ").forEach(function (kwSplitted) {
                            if (kwSplitted.trim()) {
                                stack.push(kwSplitted);
                            }
                        });
                    }
                });
                return {
                    "keywords": stack,
                    "length": stack.length
                };
            }
        }, {
            key: "getElements",
            value: function getElements() {
                var ctx = void 0,
                    stack = [];
                if (typeof this.ctx === "undefined") {
                    ctx = [];
                } else if (this.ctx instanceof HTMLElement) {
                    ctx = [this.ctx];
                } else if (Array.isArray(this.ctx)) {
                    ctx = this.ctx;
                } else {
                    ctx = Array.prototype.slice.call(this.ctx);
                }
                ctx.forEach(function (ctx) {
                    if (stack.indexOf(ctx) === -1) {
                        stack.push(ctx);
                        var childs = ctx.querySelectorAll("*");
                        if (childs.length) {
                            stack = stack.concat(Array.prototype.slice.call(childs));
                        }
                    }
                });
                if (!ctx.length) {
                    this.log("Empty context", "warn");
                }
                return {
                    "elements": stack,
                    "length": stack.length
                };
            }
        }, {
            key: "matches",
            value: function matches(el, selector) {
                return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);
            }
        }, {
            key: "matchesExclude",
            value: function matchesExclude(el, exclM) {
                var _this3 = this;

                var remain = true;
                var excl = this.opt.exclude.concat(["script", "style", "title"]);
                if (!this.opt.iframes) {
                    excl = excl.concat(["iframe"]);
                }
                if (exclM) {
                    excl = excl.concat(["*[data-markjs='true']"]);
                }
                excl.every(function (sel) {
                    if (_this3.matches(el, sel)) {
                        return remain = false;
                    }
                    return true;
                });
                return !remain;
            }
        }, {
            key: "onIframeReady",
            value: function onIframeReady(ifr, successFn, errorFn) {
                try {
                    (function () {
                        var ifrWin = ifr.contentWindow,
                            bl = "about:blank",
                            compl = "complete";
                        var callCallback = function callCallback() {
                            try {
                                if (ifrWin.document === null) {
                                    throw new Error("iframe inaccessible");
                                }
                                successFn(ifrWin.document);
                            } catch (e) {
                                errorFn();
                            }
                        };
                        var isBlank = function isBlank() {
                            var src = ifr.getAttribute("src").trim(),
                                href = ifrWin.location.href;
                            return href === bl && src !== bl && src;
                        };
                        var observeOnload = function observeOnload() {
                            var listener = function listener() {
                                try {
                                    if (!isBlank()) {
                                        ifr.removeEventListener("load", listener);
                                        callCallback();
                                    }
                                } catch (e) {
                                    errorFn();
                                }
                            };
                            ifr.addEventListener("load", listener);
                        };
                        if (ifrWin.document.readyState === compl) {
                            if (isBlank()) {
                                observeOnload();
                            } else {
                                callCallback();
                            }
                        } else {
                            observeOnload();
                        }
                    })();
                } catch (e) {
                    errorFn();
                }
            }
        }, {
            key: "forEachElementInIframe",
            value: function forEachElementInIframe(ifr, cb) {
                var _this4 = this;

                var end = arguments.length <= 2 || arguments[2] === undefined ? function () {} : arguments[2];

                var open = 0;
                var checkEnd = function checkEnd() {
                    if (--open < 1) {
                        end();
                    }
                };
                this.onIframeReady(ifr, function (con) {
                    var stack = Array.prototype.slice.call(con.querySelectorAll("*"));
                    if ((open = stack.length) === 0) {
                        checkEnd();
                    }
                    stack.forEach(function (el) {
                        if (el.tagName.toLowerCase() === "iframe") {
                            (function () {
                                var j = 0;
                                _this4.forEachElementInIframe(el, function (iel, len) {
                                    cb(iel, len);
                                    if (len - 1 === j) {
                                        checkEnd();
                                    }
                                    j++;
                                }, checkEnd);
                            })();
                        } else {
                            cb(el, stack.length);
                            checkEnd();
                        }
                    });
                }, function () {
                    var src = ifr.getAttribute("src");
                    _this4.log("iframe '" + src + "' could not be accessed", "warn");
                    checkEnd();
                });
            }
        }, {
            key: "forEachElement",
            value: function forEachElement(cb) {
                var _this5 = this;

                var end = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];
                var exclM = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

                var _getElements = this.getElements();

                var stack = _getElements.elements;
                var open = _getElements.length;

                var checkEnd = function checkEnd() {
                    if (--open === 0) {
                        end();
                    }
                };
                checkEnd(++open);
                stack.forEach(function (el) {
                    if (!_this5.matchesExclude(el, exclM)) {
                        if (el.tagName.toLowerCase() === "iframe") {
                            _this5.forEachElementInIframe(el, function (iel) {
                                if (!_this5.matchesExclude(iel, exclM)) {
                                    cb(iel);
                                }
                            }, checkEnd);
                            return;
                        } else {
                                cb(el);
                            }
                    }
                    checkEnd();
                });
            }
        }, {
            key: "forEachNode",
            value: function forEachNode(cb) {
                var end = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

                this.forEachElement(function (n) {
                    for (n = n.firstChild; n; n = n.nextSibling) {
                        if (n.nodeType === 3 && n.textContent.trim()) {
                            cb(n);
                        }
                    }
                }, end);
            }
        }, {
            key: "wrapMatches",
            value: function wrapMatches(node, regex, custom, filterCb, eachCb) {
                var hEl = !this.opt.element ? "mark" : this.opt.element,
                    index = custom ? 0 : 2;
                var match = void 0;
                while ((match = regex.exec(node.textContent)) !== null) {
                    if (!filterCb(match[index])) {
                        continue;
                    }

                    var pos = match.index;
                    if (!custom) {
                        pos += match[index - 1].length;
                    }
                    var startNode = node.splitText(pos);

                    node = startNode.splitText(match[index].length);
                    if (startNode.parentNode !== null) {
                        var repl = document.createElement(hEl);
                        repl.setAttribute("data-markjs", "true");
                        if (this.opt.className) {
                            repl.setAttribute("class", this.opt.className);
                        }
                        repl.textContent = match[index];
                        startNode.parentNode.replaceChild(repl, startNode);
                        eachCb(repl);
                    }
                    regex.lastIndex = 0;
                }
            }
        }, {
            key: "unwrapMatches",
            value: function unwrapMatches(node) {
                var parent = node.parentNode;
                var docFrag = document.createDocumentFragment();
                while (node.firstChild) {
                    docFrag.appendChild(node.removeChild(node.firstChild));
                }
                parent.replaceChild(docFrag, node);
                parent.normalize();
            }
        }, {
            key: "markRegExp",
            value: function markRegExp(regexp, opt) {
                var _this6 = this;

                this.opt = opt;
                this.log("Searching with expression \"" + regexp + "\"");
                var totalMatches = 0;
                var eachCb = function eachCb(element) {
                    totalMatches++;
                    _this6.opt.each(element);
                };
                this.forEachNode(function (node) {
                    _this6.wrapMatches(node, regexp, true, function (match) {
                        return _this6.opt.filter(node, match, totalMatches);
                    }, eachCb);
                }, function () {
                    if (totalMatches === 0) {
                        _this6.opt.noMatch(regexp);
                    }
                    _this6.opt.done(totalMatches);
                });
            }
        }, {
            key: "mark",
            value: function mark(sv, opt) {
                var _this7 = this;

                this.opt = opt;

                var _getSeparatedKeywords = this.getSeparatedKeywords(typeof sv === "string" ? [sv] : sv);

                var kwArr = _getSeparatedKeywords.keywords;
                var kwArrLen = _getSeparatedKeywords.length;

                var totalMatches = 0;
                if (kwArrLen === 0) {
                    this.opt.done(totalMatches);
                }
                kwArr.forEach(function (kw) {
                    var regex = new RegExp(_this7.createRegExp(kw), "gmi"),
                        matches = 0;
                    var eachCb = function eachCb(element) {
                        matches++;
                        totalMatches++;
                        _this7.opt.each(element);
                    };
                    _this7.log("Searching with expression \"" + regex + "\"");
                    _this7.forEachNode(function (node) {
                        _this7.wrapMatches(node, regex, false, function () {
                            return _this7.opt.filter(node, kw, matches, totalMatches);
                        }, eachCb);
                    }, function () {
                        if (matches === 0) {
                            _this7.opt.noMatch(kw);
                        }
                        if (kwArr[kwArrLen - 1] === kw) {
                            _this7.opt.done(totalMatches);
                        }
                    });
                });
            }
        }, {
            key: "unmark",
            value: function unmark(opt) {
                var _this8 = this;

                this.opt = opt;
                var sel = this.opt.element ? this.opt.element : "*";
                sel += "[data-markjs]";
                if (this.opt.className) {
                    sel += "." + this.opt.className;
                }
                this.log("Removal selector \"" + sel + "\"");
                this.forEachElement(function (el) {
                    if (_this8.matches(el, sel)) {
                        _this8.unwrapMatches(el);
                    }
                }, function () {
                    _this8.opt.done();
                }, false);
            }
        }, {
            key: "opt",
            set: function set(val) {
                this._opt = _extends({}, {
                    "element": "",
                    "className": "",
                    "exclude": [],
                    "iframes": false,
                    "separateWordSearch": true,
                    "diacritics": true,
                    "synonyms": {},
                    "accuracy": "partially",
                    "each": function each() {},
                    "noMatch": function noMatch() {},
                    "filter": function filter() {
                        return true;
                    },
                    "done": function done() {},
                    "debug": false,
                    "log": window.console
                }, val);
            },
            get: function get() {
                return this._opt;
            }
        }]);

        return Mark;
    }();

    $.fn.mark = function (sv, opt) {
        new Mark(this).mark(sv, opt);
        return this;
    };
    $.fn.markRegExp = function (regexp, opt) {
        new Mark(this).markRegExp(regexp, opt);
        return this;
    };
    $.fn.unmark = function (opt) {
        new Mark(this).unmark(opt);
        return this;
    };
    return $;
}, window, document);

jQuery(function($){
	
	//single meeting page feedback form
	$('#meeting #feedback a[href="#report"]').click(function(e){
		e.preventDefault();
		$(this).closest('#feedback').attr('class', 'form');
	});
	
	$('#meeting #feedback a[href="#cancel"]').click(function(e){
		e.preventDefault();
		$(this).closest('#feedback').attr('class', '');
	});
	
	$('#meeting #feedback form').validate({
		onfocusout:false,
    	onkeyup: function(element) { },
		highlight: function(element, errorClass, validClass) {
			$(element).closest('div.form-group').addClass('has-error');
		},
		unhighlight: function(element, errorClass, validClass) {
			$(element).closest('div.form-group').removeClass('has-error');
		},
		errorPlacement: function(error, element) {
			return; //don't show message on page, simply highlight
		}, 
		submitHandler: function(form){
			var $form = $(form),
				$feedback = $form.closest('#feedback'), 
				$alert = $feedback.find('.alert').first();
			$.post(myAjax.ajaxurl, $form.serialize(), function(data) {
				$alert.removeClass('alert-danger').addClass('alert-warning').html(data);
				$feedback.attr('class', 'confirm');
			}).fail(function(response) {
				$alert.removeClass('alert-warning').addClass('alert-danger').html('Email was not sent.');
				$feedback.attr('class', 'confirm');
			});
			return false;
		}
	});
	
	//meetings list page
	var userMarker;
	if ((location.protocol === 'https:') && navigator.geolocation) {
		$('li.geolocator').removeClass('hidden');
	}

	//run search (triggered by dropdown toggle or form submit)
	function doSearch() {

		//prepare data for ajax
		var data = { 
			action: 'meetings',
			search: $('#search input[name=query]').val().replace(/[";:,.\/?\\-]/g, '').trim(),
			day: 	$('#day li.active a').attr('data-id'),
			time:   $('#time li.active a').attr('data-id'),
			region: $('#region li.active a').attr('data-id'),
			type:   $('#type li.active a').attr('data-id'),
		}
		
		//get current query string for history and appending to links
		var querystring = {};
		if (data.search) querystring.sq = data.search;
		querystring.d = data.day ? data.day : 'any';
		if (data.time) querystring.i = data.time;
		if (data.region) querystring.r = data.region;
		if (data.type) querystring.t = data.type;
		querystring.v = $('#meetings .toggle-view.active').attr('data-id');
		querystring = jQuery.param(querystring);
		//console.log('querystring is ' + querystring)
		
		//save the query in the query string, if the browser is up to it
		if (history.pushState) {
			var url = window.location.protocol + '//' + window.location.host + window.location.pathname;
			if (querystring.length) url = url + '?' + querystring;
			if (location.search.indexOf('post_type=meetings') > -1) {
				url = url + ((url.indexOf('?') > -1) ? '&' : '?') + 'post_type=meetings';
			}
			window.history.pushState({path:url}, '', url);
		}
		
		//debugging
		//console.log(myAjax.ajaxurl)
		//console.log(data);

		//request new meetings result
		jQuery.post(myAjax.ajaxurl, data, function(response){
			if (!response.length) {

				//if keyword and no results, clear other parameters and search again
				if (data.search && (typeof data.day !== 'undefined' || typeof data.region !== 'undefined' || typeof data.time !== 'undefined' || typeof data.type !== 'undefined')) {
					$('#day li').removeClass('active').first().addClass('active');
					$('#time li').removeClass('active').first().addClass('active');
					$('#region li').removeClass('active').first().addClass('active');
					$('#type li').removeClass('active').first().addClass('active');

					//set selected text
					$('#day span.selected').html($('#day li:first-child a').html());
					$('#time span.selected').html($('#time li:first-child a').html());
					$('#region span.selected').html($('#region li:first-child a').html());
					$('#type span.selected').html($('#type li:first-child a').html());
					return doSearch();
				}

				$('#meetings table').addClass('hidden');
				$('#meetings #map').addClass('hidden');
				$('#alert').html('No results matched those criteria.').removeClass('hidden');
			} else {
				$('#meetings table').removeClass('hidden');
				if ($('#meetings #map').hasClass('hidden')) {
					$('#meetings #map').removeClass('hidden');
					google.maps.event.trigger(map, 'resize');
				}
				
				$('#alert').addClass('hidden');

				var locations = [];

				var tbody = $('#meetings_tbody').html('');

				//loop through JSON meetings
				jQuery.each(response, function(index, obj){

					//add gender designation
					if (jQuery.inArray('M', obj.types) != -1) {
						obj.name += ' <small>Men</small>';
					} else if (jQuery.inArray('W', obj.types) != -1) {
						obj.name += ' <small>Women</small>';
					}

					//save location info
					if (!locations[obj.location_id]) {
						locations[obj.location_id] = {
							name: obj.location,
							formatted_address: obj.formatted_address,
							latitude: obj.latitude,
							longitude: obj.longitude,
							url: obj.location_url,
							meetings: []
						};
					}

					//push meeting on to location
					locations[obj.location_id].meetings[locations[obj.location_id].meetings.length] = {
						name : obj.name,
						time : obj.time_formatted,
						day : obj.day,
						notes : obj.notes,
						url : obj.url
					};

					var sort_time = obj.day + '-' + (obj.time == '00:00' ? '23:59' : obj.time);
					
					//add new table row
					tbody.append('<tr>' + 
						'<td class="time" data-sort="' + sort_time + '"><span>' + (data.day || !obj.day ? obj.time_formatted : days[obj.day] + '</span><span>' + obj.time_formatted) + '</span></td>' + 
						'<td class="name" data-sort="' + obj.name + '-' + sort_time + '">' + formatLink(obj.url, obj.name, 'post_type') + '</td>' + 
						'<td class="location" data-sort="' + obj.location + '-' + sort_time + '">' + obj.location + '</td>' + 
						'<td class="address" data-sort="' + obj.formatted_address + '-' + sort_time + '">' + formatAddress(obj.formatted_address, true) + '</td>' + 
						'<td class="region" data-sort="' + (obj.sub_region || obj.region || '') + '-' + sort_time + '">' + (obj.sub_region || obj.region || '') + '</td>' + 
						'<td class="types" data-sort="' + decodeMeetingTypes(obj.types) + '-' + sort_time + '">' + decodeMeetingTypes(obj.types) + '</td>' + 
					'</tr>')
				});
				
				sortMeetings();
				
				if (data.search) $('#meetings .results tbody').mark(data.search);

				//remove old markers and reset bounds
				for (var i = 0; i < markers.length; i++) markers[i].setMap(null);
				markers = [];
				bounds = new google.maps.LatLngBounds;

				loadMap(locations);
			}
		}, 'json');	
	}
	
	//table sorting
	$('#meetings table thead').on('click', 'th', function(){
		var sort = $(this).attr('class');
		var order;

		//update header
		if ($(this).attr('data-sort')) {
			order = ($(this).attr('data-sort') == 'asc') ? 'desc' : 'asc';
		} else {
			order = 'asc';
		}
		$('#meetings table thead th').removeAttr('data-sort');
		$('#meetings table thead th.' + sort).attr('data-sort', order);
		sortMeetings();
	});
	
	function sortMeetings() {
		var $sorted = $('#meetings table thead th[data-sort]').first();
		var sort = $sorted.attr('class');
		var order = $sorted.attr('data-sort');
		var tbody = document.getElementById('meetings_tbody');
		var store = [];
		var sort_index = $('#meetings table thead th').index($sorted);

		//execute sort
		for (var i = 0, len = tbody.rows.length; i < len; i++) {
			var row = tbody.rows[i];
			store.push([row.cells[sort_index].getAttribute('data-sort'), row]);
		}
		store.sort(function(x,y){
			if (x[0] > y[0]) return (order == 'asc') ? 1 : -1;
			if (x[0] < y[0]) return (order == 'asc') ? -1 : 1;
			return 0;
		});
		for (var i = 0, len = store.length; i < len; i++){
			tbody.appendChild(store[i][1]);
		}		
	}
	
	//capture submit event
	$('#meetings #search').submit(function(e){
		doSearch();
		return false;
	});
	
	//if already searching, mark results
	var $search_field = $('#meetings #search input[name=query]');
	if ($search_field.size() && $search_field.val().length) {
		$('#meetings .results tbody').mark($search_field.val());
	}

	$('#meetings .controls').on('click', 'div.expand', function(e){
		e.preventDefault();
		e.stopPropagation();
		$(this).next('ul.children').slideToggle();
		$(this).toggleClass('expanded');
	});

	//capture dropdown change
	$('#meetings .controls').on('click', '.dropdown-menu a', function(e){
		e.preventDefault();
		
		//day only one selected
		if ($(this).closest('.dropdown').attr('id') == 'day') {
			$('#day li').removeClass('active');
			$('#day span.selected').html($(this).html());
		}

		//times only one
		if ($(this).closest('.dropdown').attr('id') == 'time') {
			$('#time li').removeClass('active');
			$('#time span.selected').html($(this).html());
		}

		//location only one
		if ($(this).closest('.dropdown').attr('id') == 'region') {
			$('#region li').removeClass('active');
			$('#region span.selected').html($(this).html());
		}

		//type only one
		if ($(this).closest('.dropdown').attr('id') == 'type') {
			$('#type li').removeClass('active');
			$('#type span.selected').html($(this).html());
		}

		$(this).parent().toggleClass('active');

		updateTitle();
		doSearch();
	});

	//toggle between list and map
	$('#meetings #action .toggle-view').click(function(e){
		e.preventDefault();
		
		//what's going on
		var action = $(this).attr('data-id');
		var previous = $('#meetings').attr('data-type');

		//save the query in the query string, if the browser is up to it
		if (history.pushState) {
			var url = updateQueryString('v', action);
			window.history.pushState({path:url}, '', url);
		}
		
		//toggle control, meetings div
		if (action == 'list') {
			closeFullscreen();
			$('#meetings #action .toggle-view[data-id=list]').addClass('active');
			$('#meetings #action .toggle-view[data-id=map]').removeClass('active');			
		} else if (action == 'map') {
			$('#meetings #action .toggle-view[data-id=map]').addClass('active');
			$('#meetings #action .toggle-view[data-id=list]').removeClass('active');			
		}

		//set meetings div
		$('#meetings').attr('data-type', action);
		
		//wake up the map if needed
		if (action == 'map' && action != previous) {
			google.maps.event.trigger(map, 'resize');
			map.fitBounds(bounds);
	   		if ((markers.length == 1) && $('#map').is(':visible')) {
	   			map.setZoom(14);
	   			google.maps.event.trigger(markers[0],'click');
	   		}
		}
	});

	$('a[href="#geolocator"]').click(function(e){
		e.preventDefault();
		$(this).toggleClass('active');

		if ($(this).hasClass('active')) {
			navigator.geolocation.getCurrentPosition(function(position) {
				var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

				userMarker = new google.maps.Marker({
					icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
					position: pos,
					map: map,
					title: 'You'
				});

				map.setCenter(pos);
				map.setZoom(13);
			}, function(err) {
  				console.log('ERROR(' + err.code + '): ' + err.message);
  				$(this).removeClass('active')
  			});
		} else if (userMarker !== undefined) {
			userMarker.setMap(null);
		}
	});

	$('a[href="#fullscreen"]').click(function(e){
		e.preventDefault();
		var center = map.getCenter();
		$(this).toggleClass('active');
		if ($(this).hasClass('active')) {
			$('body').addClass('tsml_fullscreen');
			var height = $(window).height() - 79;
			if ($('body').hasClass('admin-bar')) height -= 32;
			$('#map').css('height', height);
		} else {
			closeFullscreen();
		}
		google.maps.event.trigger(map, 'resize');
		map.setCenter(center);
	});

	//remove fullscreen with an escape key press
	$(document).keyup(function(e) {
		if (e.keyCode == 27) closeFullscreen();
	});
	
	function closeFullscreen() {
		if ($('body').hasClass('tsml_fullscreen')) {
			$('body').removeClass('tsml_fullscreen');
			$('a[href="#fullscreen"]').removeClass('active');
			$('a[href="#fullscreen"]').parent().removeClass('active');
			$('#map').css('height', 550);
		}
	}
	
	//save a string of the current state to the title bar, so that it prints nicely
	function updateTitle() {
		var string = '';
		if ($('#meetings #day li.active').index()) {
			string += $('#meetings #day span.selected').text();
		}
		if ($('#meetings #time li.active').index()) {
			string += ' ' + $('#meetings #time span.selected').text();
		}
		if ($('#meetings #type li.active').index()) {
			string += ' ' + $('#meetings #type span.selected').text();
		}
		string += ' Meetings';
		if ($('#meetings #region li.active').index()) {
			string += ' in ' + $('#meetings #region span.selected').text();
		}
		document.title = string;
	}
	if ($('body').hasClass('post-type-archive-meetings')) updateTitle();
	
	//decode meeting types for ajax table rows
	function decodeMeetingTypes(codes) {
		var return_types = [];
		for (var i = 0; i < codes.length; i++) {
			return_types[return_types.length] = myAjax.types[codes[i]];
		}
		return_types.sort();
		return return_types.join(', ');
	}
	
	//resize fullscreen on resize
	$(window).resize(function(e){
		if ($('#meetings').hasClass('tsml_fullscreen')) {
			var center = map.getCenter();
			var height = $(window).height() - 79;
			if ($('body').hasClass('admin-bar')) height -= 32;
			$('#map').css('height', height);
			google.maps.event.trigger(map, 'resize');
			map.setCenter(center);
		}
	});
	
});

//globals
var markers = [];
var map = new google.maps.Map(document.getElementById('map'), {
	panControl: false,
	mapTypeControl: false,
	mapTypeControlOptions: {
		mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
	}
});
var bounds = new google.maps.LatLngBounds();

var days = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

var infowindow = new google.maps.InfoWindow();

//load map, called from archive-meetings.php
function loadMap(locations) {

	for (var location_id in locations) {
		if (locations.hasOwnProperty(location_id)) {
			//console.log(locations[location_id]);
			
			var location = locations[location_id];
			
			//set new marker
			var marker = new google.maps.Marker({
				position: {lat: location.latitude - 0, lng: location.longitude - 0},
				map: map,
				title: location.name,
			});

			//create infowindow content
			marker.content = '<div class="infowindow"><h3>' + formatLink(location.url, location.name, 'post_type') + '</h3>' +
				'<address>' + formatAddress(location.formatted_address) + '</address>';
				
			var current_day = null;
			for (var i = 0; i < location.meetings.length; i++) {
				var meeting = location.meetings[i];
				if (current_day != meeting.day) {
					if (current_day) marker.content += '</dl>';
					current_day = meeting.day;
					if (typeof days[current_day] !== 'undefined') marker.content += '<h5>' + days[current_day] + '</h5>';
					marker.content += '<dl>';
				}
				marker.content += '<dt>' + meeting.time + '</dt><dd>' + formatLink(meeting.url, meeting.name, 'post_type') + '</dd>';
			}
			marker.content += '</dl></div>';
			
			//add infowindow event
			google.maps.event.addListener(marker, 'click', (function(marker) {
				return function() {
					infowindow.setContent(marker.content);
					infowindow.open(map, marker);
				}
			})(marker));
	
			//add to map bounds
			bounds.extend(marker.position);
			
			markers[markers.length] = marker;
		}
	}

	if (markers.length > 1) {
		map.fitBounds(bounds);
	} else if (markers.length == 1) {
		map.setCenter(bounds.getCenter());
		if (jQuery('#map').is(':visible')) google.maps.event.trigger(markers[0],'click');
		map.setZoom(14);
	} else if (markers.length == 0) {
		//currently holds last position, not sure if that's good
	}
	
}

//format an address: replace commas with breaks
function formatAddress(address, street_only) {
	address = address.split(', ');
	if (street_only) return address[0];
	if (address[address.length-1] == 'USA') {
		address.pop(); //don't show USA
		var state_and_zip = address.pop();
		address[address.length-1] += ', ' + state_and_zip;
	}
	return address.join('<br>');
}

//format a link to a meeting result page, preserving all but the excluded query string keys
function formatLink(url, text, exclude) {
	var query_pairs = location.search.substr(1).split('&');
	var new_query_pairs = [];
	for (var i = 0; i < query_pairs.length; i++) {
		var query_parts = query_pairs[i].split('=');
		if (query_parts[0] != exclude) new_query_pairs[new_query_pairs.length] = query_parts[0] + '=' + query_parts[1];
	}
	if (new_query_pairs.length) {
		url += ((url.indexOf('?') == -1) ? '?' : '&') + new_query_pairs.join('&');
	}
	return '<a href="' + url + '">' + text + '</a>';
}

function updateQueryString(key, value, url) {
	if (!url) url = window.location.href;
	var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"), hash;

	if (re.test(url)) {
		if (typeof value !== 'undefined' && value !== null) {
			return url.replace(re, '$1' + key + "=" + value + '$2$3');
		} else {
			hash = url.split('#');
			url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
			if (typeof hash[1] !== 'undefined' && hash[1] !== null) url += '#' + hash[1];
			return url;
		}
	} else {
		if (typeof value !== 'undefined' && value !== null) {
			var separator = url.indexOf('?') !== -1 ? '&' : '?';
			hash = url.split('#');
			url = hash[0] + separator + key + '=' + value;
			if (typeof hash[1] !== 'undefined' && hash[1] !== null) url += '#' + hash[1];
			return url;
		} else {
			return url;
		}
	}
}

//# sourceMappingURL=public.min.js.map
